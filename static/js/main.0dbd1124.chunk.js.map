{"version":3,"sources":["components/Navbar/index.js","components/Wrapper/index.js","components/Cards/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","href","score","topScore","Wrapper","children","PictureCard","onClick","cardClick","id","alt","name","src","image","App","state","pictures","show","resetCards","resetPictures","map","item","clicked","_this","timeoutId","clearTimeout","shuffleCards","sort","Math","random","correctPick","newData","newScore","newTopScore","max","setState","wrongPick","setTimeout","this","bind","Object","assertThisInitialized","console","log","cardClicked","guessedCorrectly","pic","_this2","Navbar","components_Wrapper","picture","key","Cards","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0dbd1124.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary justify-content-center\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Clicky-Click\n      </a>\n      <ul className=\"nav\">\n      <li className=\"nav-item\">\n        <div className=\"score\"> Score: {props.score}</div>\n      </li>\n      \n      <li className=\"nav-item\">\n      <div className=\"topscore\"> Top Score: {props.topScore}</div>\n      </li>\n    </ul>\n\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction PictureCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.cardClick(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\n\nexport default PictureCard;\n","import React, {\n  Component\n} from 'react';\nimport Nav from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport PictureCard from './components/Cards';\nimport pictures from \"./pictures.json\";\n\nclass App extends Component {\n \n  state = {\n    pictures,\n    score: 0,\n    topScore:0,\n    show:false\n  };\n\nresetCards = pictures => {\n   \n\n    const resetPictures = pictures.map(item => ({ \n      id: item.id,\n      image: item.image,\n      name: item.name, \n      clicked: false\n     }));\n    if (this.timeoutId) {\n    clearTimeout(this.timeoutId);\n}\n    return this.shuffleCards(resetPictures);\n  };\n\ncomponentDidMount() {\n  this.setState({ pictures: this.shuffleCards(this.state.pictures)});\n}\n\n//shuffle the picture's array randomly\nshuffleCards = pictures => {\n  let pictureChange = pictures.sort(() => Math.random() -0.5);\n  return pictureChange;\n};\n\n\ncorrectPick = newData => {\n  let newScore = this.state.score;\n  newScore++\n  let newTopScore = Math.max(newScore, this.state.topScore);\n  \n\n  this.setState({\n      pictures: this.shuffleCards(newData),\n      score: newScore,\n      topScore: newTopScore,\n  })\n};\n\nwrongPick = newData => {\n  this.setState({\n      pictures: this.resetCards(newData),\n      score: 0,\n      show:false\n      \n  });\n  this.timeoutId = setTimeout(function () {\n  this.setState({show: true});\n  }.bind(this), 0);\n  console.log(this.timeoutId)\n  \n}\n\ncardClicked = id => {\n  let guessedCorrectly = false;\n  const newData = this.state.pictures.map(pic => {\n    if (pic.id === id) {\n      if (!pic.clicked) {\n        pic.clicked = true;\n        guessedCorrectly = true;\n      }\n    }\n    return pic;     \n  });\n\n  guessedCorrectly ? this.correctPick(newData) : this.wrongPick(newData);\n};\n\n\n  render() {\n\n    return (\n      <div>\n        \n        <Nav \n          score={this.state.score}\n          topScore={this.state.topScore}/>\n       \n        \n        <Wrapper>\n          <div className=\"row\">\n        \n          </div>\n         \n        <div className=\"container\">\n        <div className=\"row\">\n        {this.state.pictures.map(picture => (\n          <div className={this.state.show ? 'col-3' : 'col-3'} key={picture.id}>\n          <PictureCard\n            id={picture.id}\n            image={picture.image}\n            cardClick={this.cardClicked}\n          />\n          </div>\n        ))}\n        </div>\n        </div>\n      </Wrapper>\n      </div>\n      \n    );\n  }\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}